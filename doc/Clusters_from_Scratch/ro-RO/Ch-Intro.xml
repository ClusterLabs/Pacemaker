  <chapter id="ch-intro"><title>Read-Me-First</title>
    <section id="s-intro-scope">
      <title>The Scope of this Document </title>
      <para>
        Computer clusters can be used to provide highly available services or resources. The redundancy of multiple machines is used to guard against failures of many types.
      </para>
      <para>
        This document will walk through the installation and setup of simple clusters using the Fedora distribution, version 14. The clusters described here will use Pacemaker and Corosync to provide resource management and messaging. Required packages and modifications to their configuration files are described along with the use of the Pacemaker command line tool for generating the XML used for cluster control.
      </para>
      <para>
	Pacemaker is a central component and provides the resource management required in these systems. This management includes detecting and recovering from the failure of various nodes, resources and services under its control.
      </para>
      <para>
	When more in depth information is required and for real world usage, please refer to the <ulink url="http://www.clusterlabs.org/doc/">Pacemaker Explained</ulink> manual.
      </para>
    </section>
    <section id="s-intro-pacemaker">
      <title>What Is Pacemaker?</title>
      <para>
	Pacemaker is a cluster resource manager. It achieves maximum availability for your cluster services (aka. resources) by detecting and recovering from node and resource-level failures by making use of the messaging and membership capabilities provided by your preferred cluster infrastructure (either <ulink url="http://www.corosync.org/">Corosync</ulink> or Heartbeat).
      </para>
      <para>Pacemaker's key features include:</para>
      <itemizedlist>
	<listitem><para>Detection and recovery of node and service-level failures</para></listitem>
	<listitem><para>Storage agnostic, no requirement for shared storage</para></listitem>
	<listitem><para>Resource agnostic, anything that can be scripted can be clustered</para></listitem>
	<listitem><para>Supports <ulink url="http://en.wikipedia.org/wiki/STONITH">STONITH</ulink> for ensuring data integrity</para></listitem>
	<listitem><para>Supports large and small clusters</para></listitem>
	<listitem><para>Supports both <ulink url="http://en.wikipedia.org/wiki/Quorum_(Distributed_Systems)">quorate</ulink> and <ulink url="http://devresources.linux-foundation.org/dev/clusters/docs/ResourceDrivenClusters.pdf">resource driven</ulink> clusters</para></listitem>
	<listitem><para>Supports practically any <ulink url="http://en.wikipedia.org/wiki/High-availability_cluster#Node_configurations">redundancy configuration</ulink></para></listitem>
	<listitem><para>Automatically replicated configuration that can be updated from any node</para></listitem>
	<listitem><para>Ability to specify cluster-wide service ordering, colocation and anti-colocation</para></listitem>
	<listitem><para>Support for advanced service types
	  <itemizedlist>
	    <listitem><para>Clones: for services which need to be active on multiple nodes</para></listitem>
	    <listitem><para>Multi-state: for services with multiple modes (eg. master/slave, primary/secondary)</para></listitem>
	  </itemizedlist>
	</para></listitem>
	<listitem><para>Unified, scriptable, cluster shell</para></listitem>
      </itemizedlist>
    </section>
    <section id="s-intro-architecture">
      <title>Pacemaker Architecture</title>
      <para>At the highest level, the cluster is made up of three pieces:</para>
      <itemizedlist>

	<listitem><para>
          Non-cluster aware components (illustrated in green).
          </para>
          <para>
	  These pieces include the resources themselves, scripts that start, stop and monitor them, and also a local daemon that masks the differences between the different standards these scripts implement.
	</para></listitem>

	<listitem><para>
          Resource management
          </para>
          <para>
          Pacemaker provides the brain (illustrated in blue) that processes and reacts to events regarding the cluster. These events include nodes joining or leaving the cluster; resource events caused by failures, maintenance, scheduled activities; and other administrative actions. Pacemaker will compute the ideal state of the cluster and plot a path to achieve it after any of these events. This may include moving resources, stopping nodes and even forcing them offline with remote power switches.
	</para></listitem>

	<listitem><para>
	  Low level infrastructure 
          </para>
          <para>
          Corosync provides reliable messaging, membership and quorum information about the cluster (illustrated in red).
	</para></listitem>

      </itemizedlist>
      <para>
	<figure id="fig-stack-concept">
	  <title>Conceptual Stack Overview</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/pcmk-overview.png" width="14cm" depth="7.5cm" align="center"/> 
	    </imageobject>
	    <caption>Conceptual overview of the cluster stack</caption>
	  </mediaobject>
	</figure>
      </para>
      <para>When combined with Corosync, Pacemaker also supports popular open source cluster filesystems
	<footnote>
          <para>
	    Even though Pacemaker also supports Heartbeat, the filesystems need to use the stack for messaging and membership and Corosync seems to be what they're standardizing on.
	    Technically it would be possible for them to support Heartbeat as well, however there seems little interest in this.
	  </para>
	</footnote>
	Due to recent standardization within the cluster filesystem community, they make use of a common distributed lock manager which makes use of Corosync for its messaging capabilities and Pacemaker for its membership (which nodes are up/down) and fencing services.
      </para>
      <para>
	<figure id="fig-stack-ais">
	  <title>The Pacemaker Stack</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/pcmk-stack.png" width="14cm" depth="7.5cm" align="center"/> 
	    </imageobject>
	    <caption>The Pacemaker stack when running on Corosync</caption>
	  </mediaobject>
	</figure>
      </para>
      <section id="s-pcmk-internals">
	<title>Internal Components</title>
	<para>Pacemaker itself is composed of four key components (illustrated below in the same color scheme as the previous diagram):</para>
	<itemizedlist>
	  <listitem><para>CIB (aka. Cluster Information Base)</para></listitem>
	  <listitem><para>CRMd (aka. Cluster Resource Management daemon)</para></listitem>
	  <listitem><para>PEngine (aka. PE or Policy Engine)</para></listitem>
	  <listitem><para>STONITHd</para></listitem>
	</itemizedlist>
	<para>
	  <figure id="fig-stack-internal">
	    <title>Internal Components</title>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/pcmk-internals.png" width="14cm" depth="7.5cm" align="center"/> 
	      </imageobject>
	      <caption>Subsystems of a Pacemaker cluster running on Corosync</caption>
	    </mediaobject>
	  </figure>
	</para>
	<para>
	  The CIB uses XML to represent both the cluster's configuration and current state of all resources in the cluster.
	  The contents of the CIB are automatically kept in sync across the entire cluster and are used by the PEngine to compute the ideal state of the cluster and how it should be achieved.
	</para>
	<para>
	  This list of instructions is then fed to the DC (Designated Co-ordinator).
	  Pacemaker centralizes all cluster decision making by electing one of the CRMd instances to act as a master.
	  Should the elected CRMd process, or the node it is on, fail...
	  a new one is quickly established.
	</para>
	<para>The DC carries out the PEngine's instructions in the required order by passing them to either the LRMd (Local Resource Management daemon) or CRMd peers on other nodes via the cluster messaging infrastructure (which in turn passes them on to their LRMd process).</para>
	<para>The peer nodes all report the results of their operations back to the DC and based on the expected and actual results, will either execute any actions that needed to wait for the previous one to complete, or abort processing and ask the PEngine to recalculate the ideal cluster state based on the unexpected results.</para>
	<para>
	  In some cases, it may be necessary to power off nodes in order to protect shared data or complete resource recovery.
	  For this Pacemaker comes with STONITHd.
	  STONITH is an acronym for Shoot-The-Other-Node-In-The-Head and is usually implemented with a remote power switch.
	  In Pacemaker, STONITH devices are modeled as resources (and configured in the CIB) to enable them to be easily monitored for failure, however STONITHd takes care of understanding the STONITH topology such that its clients simply request a node be fenced and it does the rest.
	</para>
      </section>
    </section>
    <section id="s-intro-redundancy">
      <title>Types of Pacemaker Clusters</title>
      <para>Pacemaker makes no assumptions about your environment, this allows it to support practically any <ulink url="http://en.wikipedia.org/wiki/High-availability_cluster#Node_configurations">redundancy configuration</ulink> including Active/Active, Active/Passive, N+1, N+M, N-to-1 and N-to-N.</para>
      <para>
        In this document we will focus on the setup of a highly available Apache web server with an Active/Passive cluster using DRBD and Ext4 to store data. Then, we will upgrade this cluster to Active/Active using GFS2.
      </para>
      <para>
	<figure id="fig-redundancy-active-passsive">
	  <title>Active/Passive Redundancy</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/pcmk-active-passive.png" width="14cm" depth="7.5cm" align="center"/>
	    </imageobject>
	    <caption>Two-node Active/Passive clusters using Pacemaker and DRBD are a cost-effective solution for many High Availability situations.</caption>
	  </mediaobject>
	</figure>
      </para>
      <para>
	<figure id="fig-redundancy-n-to-n">
	  <title>N to N Redundancy</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/pcmk-active-active.png" width="14cm" depth="7.5cm" align="center"/>
	    </imageobject>
	    <caption>
	      When shared storage is available, every node can potentially be used for failover.
	      Pacemaker can even run multiple copies of services to spread out the workload.
	    </caption>
	  </mediaobject>
	</figure>
      </para>
    </section>
  </chapter>
